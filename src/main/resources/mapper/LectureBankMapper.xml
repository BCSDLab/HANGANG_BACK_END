<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="in.hangang.mapper.LectureBankMapper">

<!--lecture bank main-->
        <select id="findLectureBankByKeyword" resultMap="searchLectureBank">
            SELECT
            <include refid="lectureBankColumnList">
                <property name="prefix" value=""/>
                <property name="alias" value="LB."/>
            </include>,
            <include refid="UserColumnList">
                <property name="prefix" value=""/>
                <property name="alias" value="U."/>
            </include>,
            <include refid="lectureColumnList">
                <property name="prefix" value=""/>
                <property name="alias" value="L."/>
            </include>
            FROM lecture_bank LB, user U, lecture L,
            (SELECT lecture_bank_id, category FROM lecture_bank LB, lecture_bank_category LBC WHERE LB.id = LBC.lecture_bank_id) LBC
            WHERE
            (LB.user_id = U.id and LB.lecture_id = L.id and LB.id = LBC.lecture_bank_id)
            and LB.available = 1
            and LB.is_deleted = 0
            and LB.reported = 0
            <if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(category)">
            and
            <foreach collection="category" item="category" open="(" close=")"  separator="or">
                LBC.category = #{category}
            </foreach>
        </if>
            <if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(keyword)">
                and
                (LB.title like concat('%',#{keyword},'%')
                or L.name like concat('%',#{keyword},'%')
                or L.professor like concat('%',#{keyword},'%'))
            </if>
            <if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(department)">
                and
                (L.department = #{department})
            </if>
            order by ${order} desc limit #{cursor}, #{limit}
        </select>


        <sql id="lectureBankColumnList">
            ${alias}id AS ${prefix}id,
            ${alias}user_id AS ${prefix}user_id,
            ${alias}lecture_id AS ${prefix}lecture_id,
            ${alias}title AS ${prefix}title,
            ${alias}content AS ${prefix}content,
            ${alias}point_price AS ${prefix}point_price,
            ${alias}hits AS ${prefix}hits,
            ${alias}created_at AS ${prefix}created_at,
            ${alias}updated_at AS ${prefix}updated_at
        </sql>
        <sql id="UserColumnList">
             ${alias}nickname AS ${prefix}nickname
        </sql>
        <sql id="lectureColumnList">
             ${alias}name AS ${prefix}name,
             ${alias}professor AS ${prefix}professor,
             ${alias}department AS ${prefix}department
        </sql>


        <resultMap id="searchLectureBank" type="in.hangang.domain.LectureBank">
            <result column="id" property="id"/>
            <result column="user_id" property="user_id"/>
            <result column="lecture_id" property="lecture_id"/>
            <result column="title" property="title"/>
            <result column="content" property="content"/>
            <result column="point_price" property="point_price"/>
            <result column="hits" property="hits"/>
            <result column="created_at" property="created_at"/>
            <result column="updated_at" property="updated_at"/>
            <association property="user" resultMap="user"/>
            <association property="lecture" resultMap="lecture"/>
        </resultMap>


        <resultMap id="user" type="in.hangang.domain.User">
            <result column="nickname" property="nickname"/>
        </resultMap>

        <resultMap id="lecture" type="in.hangang.domain.Lecture">
            <result column="name" property="name"/>
            <result column="professor" property="professor"/>
            <result column="department" property="department"/>
        </resultMap>



        <select id="getCategoryList" resultType="in.hangang.domain.LectureBankCategory">
            select id, lecture_bank_id, category from lecture_bank_category where lecture_bank_id = #{sdf}
        </select>


        <select id="getLectureBank" resultType="in.hangang.domain.LectureBank">
            SELECT * FROM lecture_bank WHERE id = #{id}
        </select>

    <select id="getLectureInfo" resultMap="lecture">
        SELECT * FROM lecture WHERE id = #{id};
    </select>

    <insert id="createLectureBank">
        INSERT INTO lecture_bank (user_id, lecture_id, title)
        VALUES(#{user_id}, 0,'');
    </insert>

    <select id="getLectureBankId" resultType="java.lang.Long">
        SELECT id FROM lecture_bank
        where user_id = #{user_id} AND available = 0
        ORDER BY created_at desc LIMIT 1;
    </select>

    <update id="setLectureBank">
        UPDATE lecture_bank SET title = #{title}, content = #{content}, lecture_id = #{lecture_id}
                              ,point_price = #{point_price}, semester_date_id = #{semester_date_id}
        WHERE id = #{lecture_bank_id};
    </update>
    <update id="setLectureBankAvailable">
        UPDATE lecture_bank SET available = 1
        WHERE id = #{lecture_bank_id};
    </update>



    <insert id="addCategory">
        INSERT INTO lecture_bank_category(lecture_bank_id, category)
        VALUES (#{lecture_bank_id},#{category});
    </insert>

    <insert id="addMultiCategory">
        INSERT INTO lecture_bank_category(lecture_bank_id, category)
        VALUES
        <foreach collection="category_list" item="category"  separator=",">
            (#{lecture_bank_id}, #{category})
        </foreach>;
    </insert>

    <delete id="deleteCategory">
        DELETE FROM lecture_bank_category
        where id = #{id};
    </delete>
    <delete id="deleteMultiCategory">
        DELETE FROM lecture_bank_category
        WHERE id IN
        <foreach collection="id_list" item="id" open="(" close=")"  separator=",">
            #{id}
        </foreach>;
    </delete>

    <delete id="deleteLectureBank">
        UPDATE lecture_bank SET is_deleted =1
        WHERE id = #{id} AND user_id = #{user_id};
    </delete>

    <select id="getCategoryIdList" resultType="java.lang.Long">
        SELECT id FROM lecture_bank_category
        where lecture_bank_id = #{lecture_bank_id};
    </select>

    <select id="getWriterId" resultType="java.lang.Long">
        SELECT user_id FROM lecture_bank
        where id = #{id};
    </select>

    <select id="getLatestSemester" resultType="java.lang.String">
        SELECT semester FROM semester_date
        ORDER BY id DESC LIMIT 1;
    </select>

    <select id="getSemesterID" resultType="java.lang.Long">
        SELECT id FROM semester_date
        where semester = #{semester}
    </select>

<!--purchase-->

    <select id="checkPurchased" resultType="Integer">
        SELECT purchased FROM lecture_bank_purchase
        WHERE user_id=#{user_id} AND lecture_bank_id=#{lecture_bank_id};
    </select>
    <insert id="purchaseInsert">
        INSERT INTO lecture_bank_purchase(user_id, lecture_bank_id, purchased)
        VALUES (#{user_id}, #{lecture_bank_id}, 1);
    </insert>
    <update id="setPoint">
        UPDATE user set point = point + #{point}
        where id = #{user_id};
    </update>

    <select id="getPurchaseId" resultType="java.lang.Long">
        SELECT id FROM lecture_bank_purchase
        WHERE lecture_bank_id=#{lecture_bank_id};
    </select>

    <update id="deletePurchase">
        UPDATE lecture_bank_purchase set is_deleted = 1
        WHERE id = #{id};
    </update>

    <update id="deleteMultiPurchase">
        UPDATE lecture_bank_purchase set is_deleted = 1
        WHERE id IN
        <foreach collection="id_list" item="id" open="(" close=")"  separator=",">
            #{id}
        </foreach>;
    </update>

    <select id="getUserPoint" resultType="java.lang.Integer">
        SELECT point FROM user
        WHERE id = #{user_id};
    </select>



    <!--Hit-->
    <select id="checkHits" resultType="Integer">
        SELECT hit FROM lecture_bank_hit WHERE user_id=#{user_id} AND lecture_bank_id=#{lecture_bank_id};
    </select>

    <update id="subHit">
        UPDATE lecture_bank_hit SET hit = 0
        WHERE lecture_bank_id = #{lecture_bank_id} AND user_id = #{user_id};
    </update>
    <update id="addHit">
        UPDATE lecture_bank_hit SET hit = 1
        WHERE lecture_bank_id = #{lecture_bank_id} AND user_id = #{user_id};
    </update>
    <update id="addHit_lecture_bank">
        UPDATE lecture_bank SET hits = hits + 1 WHERE id = #{lecture_bank_id};
    </update>
    <update id="subHit_lecture_bank">
        UPDATE lecture_bank SET hits = hits - 1 WHERE id = #{lecture_bank_id};
    </update>
    <insert id="hitInsert">
        INSERT INTO lecture_bank_hit(user_id, lecture_bank_id,hit)
        values(#{user_id}, #{lecture_bank_id},1);
    </insert>
    <update id="deleteHit">
        UPDATE lecture_bank_hit SET is_deleted = 1
        WHERE id = #{id};
    </update>
    <update id="deleteMultiHit">
        UPDATE lecture_bank_hit SET is_deleted = 1
        WHERE id IN
        <foreach collection="id_list" item="id" open="(" close=")"  separator=",">
            #{id}
        </foreach>;
    </update>
    <select id="getHitId" resultType="java.lang.Long">
        SELECT id FROM lecture_bank_purchase
        WHERE lecture_bank_id=#{lecture_bank_id};
    </select>

<!--Comment-->

    <select id="getComments" resultType="in.hangang.domain.LectureBankComment">
        SELECT * FROM lecture_bank_comment WHERE reported = 0
        AND lecture_bank_id = #{lecture_bank_id};
    </select>

    <insert id="addComment">
        INSERT INTO lecture_bank_comment(user_id, lecture_bank_id, comments)
        VALUES (#{user_id}, #{lecture_bank_id}, #{comments});
    </insert>
    <update id="setComment">
        UPDATE lecture_bank_comment SET comments = #{comments}
        where id = #{id};
    </update>
    <update id="deleteComment">
        UPDATE lecture_bank_comment SET is_deleted = 1
        where id = #{id};
    </update>

    <select id="getCommentWriterId" resultType="java.lang.Long">
        SELECT user_id FROM lecture_bank_comment
        where id = #{id};
    </select>

    <select id="getCommentIdList" resultType="java.lang.Long">
        SELECT id FROM lecture_bank_comment
        WHERE lecture_bank_id = #{lecture_bank_id};
    </select>

    <update id="deleteMultiComment">
        UPDATE lecture_bank_comment SET is_deleted = 1
        where id IN
        <foreach collection="id_list" item="id" open="(" close=")"  separator=",">
            #{id}
        </foreach>;
    </update>


<!--File-->

    <insert id="insertUpload_file">
        INSERT INTO upload_file(lecture_bank_id, url, filename, ext)
        VALUES (#{lecture_bank_id}, #{url}, #{filename}, #{ext});
    </insert>

    <select id="getFileList" resultType="in.hangang.domain.UploadFile">
        SELECT * FROM upload_file
        where lecture_bank_id = #{lecture_bank_id};
    </select>
    <select id="getUploadFileId" resultType="java.lang.Long">
        SELECT id FROM upload_file
        where lecture_bank_id = #{lecture_bank_id}
        ORDER BY created_at desc LIMIT 1;
    </select>
    <select id="getFileIdList" resultType="java.lang.Long">
        SELECT id FROM upload_file
        where lecture_bank_id = #{lecture_bank_id};
    </select>
    <update id="setFileAvailable">
        UPDATE upload_file SET available = #{available}
        WHERE id = #{id} AND available = 0;
    </update>
    <update id="setMultiFileAvailable_0">
        UPDATE upload_file SET available = #{available}
        WHERE available = 0 AND id in
        <foreach collection="id_list" item="id" open="(" close=")"  separator=",">
            #{id}
        </foreach>;
    </update>
    <select id="getUrl" resultType="java.lang.String">
        SELECT url FROM upload_file
        WHERE id = #{id};
    </select>
    <select id="getFileId" resultType="java.lang.Long">
        SELECT id FROM upload_file
        WHERE lecture_bank_id = #{lecture_bank_id};
    </select>
    <select id="getLectureBankId_file" resultType="java.lang.Long">
        SELECT lecture_bank_id FROM upload_file
        WHERE id = #{id};
    </select>

    <update id="deleteFile">
        UPDATE upload_file SET available = #{available}
        WHERE id = #{id} AND available = 1;
    </update>
    <update id="deleteMultiFile">
        UPDATE upload_file SET available = #{available}
        WHERE available = 1 AND id IN
        <foreach collection="id_list" item="id" open="(" close=")"  separator=",">
            #{id}
        </foreach>;
    </update>
    <update id="deleteMultiFile_UN">
        UPDATE upload_file SET available = #{available}
        WHERE available = 0 AND id IN
        <foreach collection="id_list" item="id" open="(" close=")"  separator=",">
            #{id}
        </foreach>;
    </update>


    <select id="getDelIDList" resultType="java.lang.Long">
        SELECT id FROM upload_file
        WHERE available = 2;
    </select>
    <select id="getDelObjectList" resultType="java.lang.String">
        SELECT url FROM upload_file
        WHERE available = 2;
    </select>
    <delete id="hardDeleteFile">
        DELETE FROM upload_file
        where id = #{id};
    </delete>
    <delete id="hardDeleteMultiFile">
        DELETE FROM upload_file
        where id in
        <foreach collection="id_list" item="id" open="(" close=")"  separator=",">
            #{id}
        </foreach>;
    </delete>
    <select id="getLectureBankIDFile" resultType="java.lang.Long">
        SELECT lecture_bank_id FROM upload_file
        WHERE id = #{upload_file_id};
    </select>
<!--else-->

    <insert id="addPointHistory">
        INSERT INTO user_point_history(user_id, variance, point_type_id)
        VALUES (#{user_id}, #{variance}, #{point_type_id});
    </insert>

<!--REPORT-->

    <insert id="reportLectureBank">
        INSERT INTO lecture_bank_report(lecture_bank_id, report_id)
        VALUES (#{lecture_bank_id}, #{report_id});
    </insert>

    <insert id="reportLectureBankComment">
        INSERT INTO lecture_bank_report(lecture_bank_comment_id, report_id)
        VALUES (#{lecture_bank_comment_id}, #{report_id});
    </insert>
    <update id="makeLectureBankReported">
        UPDATE lecture_bank SET reported = 1
        WHERE id = #{lecture_bank_id};
    </update>
    <update id="makeLectureBankCommentReported">
        UPDATE lecture_bank_comment SET reported = 1
        WHERE id = #{lecture_bank_comment_id};
    </update>



</mapper>