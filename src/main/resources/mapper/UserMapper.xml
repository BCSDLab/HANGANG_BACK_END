<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="in.hangang.mapper.UserMapper">

    <insert id="signUp">
        INSERT INTO hangang.user (portal_account, password, nickname)
        VALUES(#{portal_account}, #{password}, #{nickname})
    </insert>
    <update id="setSalt">
        UPDATE hangang.user SET salt = #{salt} WHERE id=#{user_id}
    </update>

    <select id="getUserIdFromPortal" resultType="Long">
        SELECT id FROM hangang.user WHERE portal_account =#{portal_account} and is_deleted = 0
    </select>

    <select id="getUserIdFromPortalForReSignUp" resultType="Long">
        SELECT id FROM hangang.user WHERE portal_account = #{portal_account} and is_deleted = 1
    </select>

    <select id="getUserByNickName" resultType="String">
        SELECT nickname FROM hangang.user WHERE nickname = #{nickname} and is_deleted = 0
    </select>

    <select id="getPasswordFromPortal" resultType="in.hangang.domain.User">
        SELECT password,nickname,id FROM hangang.user WHERE portal_account = #{portal_account} and is_deleted = 0
    </select>

    <select id="getSalt" resultType="String">
        SELECT salt FROM hangang.user WHERE id=#{id} and is_deleted = 0
    </select>

    <insert id="setAuthNumber">
        INSERT INTO hangang.auth_number(ip,portal_account, secret,flag, expired_at) VALUES (#{ip},#{portal_account}, #{secret},#{flag}, #{expired_at} )
    </insert>

    <select id="getSecret" resultType="in.hangang.domain.AuthNumber">
        SELECT id,ip, secret,flag, expired_at FROM hangang.auth_number WHERE portal_account = #{portal_account} and flag = #{flag} and is_deleted = 0
    </select>
    <update id="setIs_authed">
        UPDATE hangang.auth_number   SET is_authed = #{is_authed} WHERE id=#{id} and flag=#{flag}
    </update>
    <select id="getAuthTrue" resultType="in.hangang.domain.AuthNumber">
        SELECT is_authed FROM hangang.auth_number WHERE is_authed = 1 and portal_account =#{portal_account} and flag=#{flag} and is_deleted = 0
    </select>

    <update id="findPassword">
        UPDATE hangang.user set password=#{password} WHERE portal_account=#{portal_account}
    </update>
    <select id="getMajor" resultType="String">
        SELECT major FROM hangang.major WHERE user_id = #{id} and is_deleted = 0
    </select>

    <select id="authNumberAllSoftDeleteAfterUse" resultType="Integer" >
        SELECT COUNT(*) FROM hangang.auth_number WHERE portal_account = #{portal_account} and ip = #{ip} and created_at BETWEEN #{start} AND #{end}
    </select>

    <update id ="expirePastAuthNumber">
        UPDATE hangang.auth_number SET expired_at = #{expired_at}, is_deleted = 1
        WHERE portal_account = #{portal_account} and ip = #{ip} and flag=#{flag} and is_deleted = 0
    </update>

    <update id="authNumberSoftDelete">
        UPDATE hangang.auth_number SET is_deleted = 1 WHERE id=#{id}
    </update>

    <select id="getMe" resultMap="userAll">
        SELECT
        <include refid="user-all">
            <property name="prefix" value=""/>
            <property name="alias" value=""/>
        </include>
        FROM hangang.user
        WHERE id = #{id}
    </select>

    <select id="getLectureBankCount" resultType="Long">
        SELECT COUNT(*) FROM hangang.lecture_bank WHERE user_id=#{id};
    </select>

    <select id="getLectureReviewCount" resultType="Long">
        SELECT COUNT(*) FROM hangang.review WHERE user_id=#{id};
    </select>

    <select id="getLectureBankCommentCount" resultType="Long">
        SELECT COUNT(*) FROM hangang.lecture_bank_comment WHERE user_id=#{id};
    </select>

    <insert id="addPointHistory">
        INSERT INTO hangang.user_point_history(user_id,variance,point_type_id) VALUES(#{user_id}, #{variance}, #{pointTypeId})
    </insert>

    <select id="getUserPointHistory" resultType="in.hangang.domain.PointHistory">
        SELECT up.id, up.user_id, type.title,up.variance, created_at
        FROM hangang.user_point_history AS up
        JOIN hangang.point_type AS type
        ON up.point_type_id = type.id
        WHERE up.user_id = #{id}
    </select>
    <resultMap id="userAll" type="in.hangang.domain.User">
        <result column="id" property="id"/>
        <result column="portal_account" property="portal_account"/>
        <result column="nickname" property="nickname"/>
        <result column="profile_image_url" property="profile_image_url"/>
        <result column="point" property="point"/>
        <result column="is_deleted" property="is_deleted"/>
        <result column="created_at" property="created_at"/>
        <result column="updated_at" property="updated_at"/>
        <collection  column="id" property="major" javaType="java.util.ArrayList"  ofType="String" select="getMajor"> </collection>
    </resultMap>


    <sql id="user-all">
        ${alias}id AS ${prefix}id
		,${alias}portal_account AS ${prefix}portal_account
		,${alias}nickname AS ${prefix}nickname
		,${alias}profile_image_url AS ${prefix}profile_image_url
		,${alias}point AS ${prefix}point
		,${alias}is_deleted AS ${prefix}is_deleted
        ,${alias}created_at AS ${prefix}created_at
        ,${alias}updated_at AS ${prefix}updated_at
    </sql>

    <update id="setProfile">
        UPDATE hangang.user SET profile_image_url = #{url} WHERE id = #{id} and is_deleted=0
    </update>



    <insert id="insertMajors" >
        INSERT INTO hangang.major(user_id, major) VALUES
        <foreach collection="major" item="m" separator=",">
            (#{id}, #{m})
        </foreach>
    </insert>

    <insert id="reSignMajors" >
        DELETE FROM hangang.major WHERE user_id = #{id};
        INSERT INTO hangang.major(user_id, major) VALUES
        <foreach collection="major" item="m" separator=",">
            (#{id}, #{m})
        </foreach>
    </insert>


    <insert id="updateUser" >
        UPDATE hangang.user SET nickname = #{nickname} WHERE id = #{id} and is_deleted=0;
        DELETE FROM hangang.major WHERE user_id = #{id};
        INSERT INTO hangang.major(user_id, major) VALUES
        <foreach collection="major" item="m" separator=",">
            (#{id}, #{m})
        </foreach>
    </insert>

    <update id="reSignUp" >
        UPDATE hangang.user SET is_deleted = 0, nickname = #{nickname}, password=#{password}, salt=#{salt} where id = #{id}
    </update>

    <update id="softDeleteUser">
        UPDATE hangang.user SET is_deleted = 1, nickname = #{nickname} WHERE id = #{id}
    </update>

</mapper>
