<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="in.hangang.mapper.LectureMapper">
    <select id="getScrapLectureList" resultMap="lectureList">
        SELECT
        <include refid="lecture-list">
            <property name="prefix" value=""/>
            <property name="alias" value="LEC."/>
        </include>
        FROM hangang.lecture LEC WHERE id IN (SELECT lecture_id FROM hangang.scrap_lecture WHERE user_id = #{userId} AND is_deleted = 0);
    </select>
    <insert id="scrapLecture">
        INSERT INTO hangang.scrap_lecture(user_id, lecture_id) VALUES(#{userId}, #{lectureId});
    </insert>
    <update id="deleteScrapLecture">
        UPDATE hangang.scrap_lecture SET is_deleted = 1 WHERE user_id = #{userId} AND
        <foreach collection="lectureId" item="lectureId" open="(" close=")" separator="or">
            lecture_id = #{lectureId}
        </foreach>
    </update>

    <select id="getLecture" resultMap="lectureList">
        SELECT
        <include refid="lecture-list">
            <property name="prefix" value=""/>
            <property name="alias" value="LEC."/>
        </include>
        <if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(user)">
            ,(SELECT count(*) FROM scrap_lecture SL WHERE SL.lecture_id = LEC.id AND SL.user_id = #{user.id} AND is_deleted = 0) as is_scraped
        </if>
        FROM hangang.lecture LEC
        WHERE id = #{id}
    </select>

    <select id="getScrapLectureId" resultType="java.lang.Long">
        SELECT lecture_id FROM hangang.scrap_lecture WHERE user_id = #{userId} AND is_deleted = 0;
    </select>

    <select id="checkAlreadyScraped" resultType="Long">
        SELECT count(*) FROM hangang.scrap_lecture WHERE user_id = #{userId} AND lecture_id = #{lectureId} AND is_deleted = 0;
    </select>
    <select id="getLectureList" resultMap="lectureList">
        SELECT
        <include refid="lecture-list">
            <property name="prefix" value=""/>
            <property name="alias" value="LEC."/>
        </include>
        <if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(user)">
            ,(SELECT count(*) FROM scrap_lecture SL WHERE SL.lecture_id = LEC.id AND SL.user_id = #{user.id} AND is_deleted = 0) as is_scraped
        </if>
        FROM hangang.lecture LEC
        <choose>
            <when test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(lectureCriteria.hashtag)">
                ,(SELECT
                <include refid="HashTagTop3-list">
                    <property name="prefix" value=""/>
                    <property name="alias" value="TOP."/>
                </include>
                FROM hangang.hash_tag_top3 TOP

                WHERE TOP.hash_tag_id IN(
                    <foreach collection="lectureCriteria.hashtag" item="hashtag" separator=",">
                        #{hashtag}
                    </foreach>
                )
                GROUP BY TOP.lecture_id HAVING ranking <![CDATA[<=]]> 3
                ) B
                WHERE LEC.id=B.lecture_id AND LEC.is_deleted = 0
            </when>
            <otherwise>
                WHERE LEC.is_deleted=0
            </otherwise>
        </choose>
        <choose>
            <when test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(lectureCriteria.classification)">
                AND
                <foreach collection="lectureCriteria.classification" item="classification" open="(" close=")" separator="or">
                    LEC.classification = #{classification}
                </foreach>
            </when>
        </choose>
        <choose>
            <when test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(lectureCriteria.keyword)">
                AND ((LEC.name like concat('%',#{lectureCriteria.keyword},'%')) OR (LEC.professor like concat('%',#{lectureCriteria.keyword},'%')))
            </when>
        </choose>
        <choose>
            <when test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(lectureCriteria.department)">
                AND
                <foreach collection="lectureCriteria.department" item="department" open="(" close=")" separator="or">
                    LEC.department = #{department}
                </foreach>
            </when>
        </choose>

        <choose>
            <!--해시태그가 있을 때-->
            <when test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(lectureCriteria.hashtag)">
                ORDER BY B.ranking DESC
                <!--정렬 옵션이 있을 때-->
                <if test="lectureCriteria.sort!=null">
                    <if test='(lectureCriteria.sort eq "평점순".toString())'>
                        ,LEC.total_rating DESC
                    </if>
                    <if test='(lectureCriteria.sort eq "최신순".toString())'>
                        ,LEC.last_reviewed_at DESC
                    </if>
                    <if test='(lectureCriteria.sort eq "평가순".toString())'>
                        ,LEC.review_count DESC
                    </if>
                </if>
                ,LEC.id ASC
                <!--정렬 옵션이 없을 때-->
            </when>

            <!--해시태그가 없을 때-->
            <otherwise>
                <!--정렬 옵션이 있을 때-->
                <if test="lectureCriteria.sort!=null">
                    ORDER BY
                    <if test='(lectureCriteria.sort eq "평점순".toString())'>
                        LEC.total_rating DESC, LEC.id ASC
                    </if>
                    <if test='(lectureCriteria.sort eq "최신순".toString())'>
                        LEC.last_reviewed_at DESC, LEC.id ASC
                    </if>
                    <if test='(lectureCriteria.sort eq "평가순".toString())'>
                        LEC.review_count DESC, LEC.id ASC
                    </if>
                </if>
                <!--정렬 옵션이 없을 때-->

            </otherwise>
        </choose>
        LIMIT #{lectureCriteria.cursor}, #{lectureCriteria.limit}
    </select>

    <select id="getCountLectureList" resultType="Long">
        SELECT
        count(*)
        FROM hangang.lecture LEC
        <choose>
            <when test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(lectureCriteria.hashtag)">
                ,(SELECT
                <include refid="HashTagTop3-list">
                    <property name="prefix" value=""/>
                    <property name="alias" value="TOP."/>
                </include>
                FROM hangang.hash_tag_top3 TOP

                WHERE TOP.hash_tag_id IN(
                <foreach collection="lectureCriteria.hashtag" item="hashtag" separator=",">
                    #{hashtag}
                </foreach>
                )
                GROUP BY TOP.lecture_id HAVING ranking <![CDATA[<=]]> 3
                ) B
                WHERE LEC.id=B.lecture_id AND LEC.is_deleted = 0
            </when>
            <otherwise>
                WHERE LEC.is_deleted=0
            </otherwise>
        </choose>
        <choose>
            <when test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(lectureCriteria.classification)">
                AND
                <foreach collection="lectureCriteria.classification" item="classification" open="(" close=")" separator="or">
                    LEC.classification = #{classification}
                </foreach>
            </when>
        </choose>
        <choose>
            <when test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(lectureCriteria.keyword)">
                AND ((LEC.name like concat('%',#{lectureCriteria.keyword},'%')) OR (LEC.professor like concat('%',#{lectureCriteria.keyword},'%')))
            </when>
        </choose>
        <choose>
            <when test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(lectureCriteria.department)">
                AND
                <foreach collection="lectureCriteria.department" item="department" open="(" close=")" separator="or">
                    LEC.department = #{department}
                </foreach>
            </when>
        </choose>
    </select>
    <update id="updateTotalRatingById">
        UPDATE lecture SET total_rating = (SELECT ROUND(AVG(rating), 2) FROM hangang.review WHERE lecture_id = #{id}) WHERE id = #{id}
    </update>

    <select id="getGrade" resultType="Long">
        SELECT grades FROM hangang.lecture_timetable WHERE name = #{name} AND professor = #{professor} AND code = #{code} ORDER BY id DESC LIMIT 1;
    </select>

    <resultMap id="lectureList" type="in.hangang.domain.Lecture">
        <result column="id" property="id"/>
        <result column="is_scraped" property="is_scraped"/>
        <result column="name" property="name"/>
        <result column="code" property="code"/>
        <result column="department" property="department"/>
        <result column="professor" property="professor"/>
        <result column="total_rating" property="total_rating"/>
        <result column="classification" property="classification"/>
        <result column="is_deleted" property="is_deleted"/>
        <result column="created_at" property="created_at"/>
        <result column="updated_at" property="updated_at"/>
        <result column="last_reviewed_at" property="last_reviewed_at"/>
        <result column="review_count" property="review_count"/>
        <collection property="semester_data" ofType="Long" column="{name=name,professor=professor}"
                    select="getSemesterDateByNameAndProfessor">
        </collection>
        <collection property="top3_hash_tag" javaType="java.util.ArrayList" column="id"
                    ofType="in.hangang.domain.HashTag" select="in.hangang.mapper.HashTagMapper.getTop3HashTag">
        </collection>
        <collection property="grade" ofType="Long" column="{name=name, professor=professor, code=code}"
                    select="getGrade">
        </collection>
    </resultMap>

    <select id="checkLectureExists" resultType="Long">
        SELECT id FROM hangang.lecture WHERE id = #{id}
    </select>

    <select id="getProfessorById" resultType="String">
        SELECT professor FROM hangang.lecture WHERE id = #{id}
    </select>

    <select id="getNameById" resultType="String">
        SELECT name FROM hangang.lecture WHERE id = #{id}
    </select>

    <update id="updateReviewCountById">
        UPDATE lecture SET review_count = review_count + 1 WHERE id = #{id}
    </update>

    <update id="updateReviewCount">
        update lecture, (select lecture_id, count(*) as count from review group by lecture_id) REV
        SET lecture.review_count = REV.count
        WHERE lecture.id = REV.lecture_id
    </update>

    <select id="getClassByLectureId" resultMap="classMap">
        SELECT id, class, target, professor, class_time, name FROM lecture_timetable
        WHERE name = (SELECT name FROM lecture WHERE id = #{lecture_id})
          AND professor = (SELECT professor FROM lecture WHERE id = #{lecture_id})
          AND semester_date = 5
        ORDER BY class
    </select>

    <select id="getSemesterDateIdByNameAndProfessor" resultType="Long">
        SELECT semester_date FROM hangang.lecture_timetable WHERE name=#{name} AND professor=#{professor} GROUP BY semester_date
    </select>

    <select id="getSemesterDateByNameAndProfessor" resultType="String">
        SELECT semester FROM hangang.semester_date WHERE id
        IN (SELECT semester_date FROM hangang.lecture_timetable WHERE name=#{name} AND professor=#{professor} GROUP BY semester_date)
    </select>

    <select id="getSemesterDateById" resultType="String">
        SELECT semester FROM hangang.semester_date WHERE id = #{id}
    </select>

    <resultMap id="classMap" type="in.hangang.domain.ClassTimeMap">
        <result column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="class" property="classNumber"/>
        <result column="target" property="target"/>
        <result column="class_time" property="classTime"/>
    </resultMap>

    <sql id="lecture-list">
        ${alias}id AS ${prefix}id
		,${alias}name AS ${prefix}name
		,${alias}code AS ${prefix}code
		,${alias}department AS ${prefix}department
		,${alias}professor AS ${prefix}professor
		,${alias}classification AS ${prefix}classification
		,${alias}is_deleted AS ${prefix}is_deleted
        ,${alias}created_at AS ${prefix}created_at
        ,${alias}updated_at AS ${prefix}updated_at
        ,${alias}last_reviewed_at AS ${prefix}last_reviewed_at
        ,${alias}total_rating AS ${prefix}total_rating
        ,${alias}review_count AS ${prefix}review_count
    </sql>

    <sql id="HashTagTop3-list">
        ${alias}lecture_id AS ${prefix}lecture_id
		,count(${alias}lecture_id) AS ${prefix}ranking
    </sql>

</mapper>