<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="in.hangang.mapper.LectureMapper">

    <select id="getLectureList" resultMap="lectureList">
        SELECT
        <include refid="lecture-list">
            <property name="prefix" value=""/>
            <property name="alias" value="LEC."/>
        </include>
        FROM hangang.lecture LEC
        <choose>
            <when test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(hashtag)">
                ,(SELECT
                <include refid="HashTagTop3-list">
                    <property name="prefix" value=""/>
                    <property name="alias" value="TOP."/>
                </include>
                FROM hangang.hash_tag_top3 TOP

                WHERE TOP.hash_tag_id IN(
                    <foreach collection="hashtag" item="hashtag" separator=",">
                        #{hashtag}
                    </foreach>
                )
                GROUP BY TOP.lecture_id HAVING ranking <![CDATA[<=]]> 3
                ) B
                WHERE LEC.id=B.lecture_id AND LEC.is_deleted = 0
            </when>
            <otherwise>
                WHERE LEC.is_deleted=0
            </otherwise>
        </choose>
        <choose>
            <when test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(classification)">
                AND
                <foreach collection="classification" item="classification" open="(" close=")" separator="or">
                    LEC.classification = #{classification}
                </foreach>
            </when>
        </choose>
        <choose>
            <when test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(keyword)">
                AND ((LEC.name like concat('%',#{keyword},'%')) OR (LEC.professor like concat('%',#{keyword},'%')))
            </when>
        </choose>
        <choose>
            <when test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(department)">
                AND LEC.department = #{department}
            </when>
        </choose>

        <choose>
            <!--해시태그가 있을 때-->
            <when test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(hashtag)">
                ORDER BY B.ranking DESC
                <!--정렬 옵션이 있을 때-->
                <if test="sort!=null">
                    <if test='(sort eq "평점순".toString())'>
                        ,LEC.total_rating DESC
                    </if>
                    <if test='(sort eq "최신순".toString())'>
                        ,LEC.latest_reviewed_at DESC
                    </if>
                    <if test='(sort eq "평가순".toString())'>
                        ,COUNT(LEC.id) DESC
                    </if>
                </if>
                <!--정렬 옵션이 없을 때-->
            </when>

            <!--해시태그가 없을 때-->
            <otherwise>
                <!--정렬 옵션이 있을 때-->
                <if test="sort!=null">
                    ORDER BY
                    <if test='(sort eq "평점순".toString())'>
                        LEC.total_rating DESC
                    </if>
                    <if test='(sort eq "최신순".toString())'>
                        LEC.latest_reviewed_at DESC
                    </if>
                    <if test='(sort eq "평가순".toString())'>
                        COUNT(LEC.id) DESC
                    </if>
                </if>
                <!--정렬 옵션이 없을 때-->

            </otherwise>
        </choose>
        LIMIT #{cursor}, #{limit}
    </select>

    <update id="updateTotalRating">
        INSERT hangang.total_evaluation(lecture_id, rating)
        VALUES (#{lecture_id}, ROUND((SELECT AVG(rating) FROM hangang.review WHERE lecture_id = #{lecture_id}), 2))
    </update>


    <resultMap id="lectureList" type="in.hangang.domain.Lecture">
        <result column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="department" property="department"/>
        <result column="professor" property="professor"/>
        <result column="classification" property="classification"/>
        <result column="is_deleted" property="is_deleted"/>
        <result column="created_at" property="created_at"/>
        <result column="updated_at" property="updated_at"/>
        <collection property="semester_data" ofType="java.lang.String" column="{name=name,professor=professor}"
                    select="getSemesterDateByNameAndProfessor">
        </collection>
        <collection property="top3_hash_tag" javaType="java.util.ArrayList" column="id"
                    ofType="in.hangang.domain.HashTag" select="in.hangang.mapper.HashTagMapper.getTop3HashTag">
        </collection>
        <collection property="total_rating" javaType="String" column="id"
                    select="in.hangang.mapper.TotalEvaluationMapper.getTotalRating">
        </collection>
    </resultMap>

    <select id="checkLectureExists" resultType="Long">
        SELECT id FROM hangang.lecture WHERE id = #{id}
    </select>

    <select id="getProfessorById" resultType="String">
        SELECT professor FROM hangang.lecture WHERE id = #{id}
    </select>

    <select id="getNameById" resultType="String">
        SELECT name FROM hangang.lecture WHERE id = #{id}
    </select>

    <select id="getSemesterDateByNameAndProfessor" resultType="String">
        SELECT semester FROM hangang.semester_date
        WHERE id IN(SELECT semester_date FROM hangang.lecture_timetable WHERE name=#{name} AND professor=#{professor} GROUP BY semester_date)
    </select>
    <sql id="lecture-list">
        ${alias}id AS ${prefix}id
		,${alias}name AS ${prefix}name
		,${alias}department AS ${prefix}department
		,${alias}professor AS ${prefix}professor
		,${alias}classification AS ${prefix}classification
		,${alias}is_deleted AS ${prefix}is_deleted
        ,${alias}created_at AS ${prefix}created_at
        ,${alias}updated_at AS ${prefix}updated_at
        ,${alias}last_reviewed_at AS ${prefix}last_reviewed_at
    </sql>

    <sql id="HashTagTop3-list">
        ${alias}lecture_id AS ${prefix}lecture_id
		,count(${alias}lecture_id) AS ${prefix}ranking
    </sql>

</mapper>