<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="in.hangang.mapper.TimetableMapper">
    <select id="getLatestSemesterDateId" resultType="Long">
        SELECT id FROM semester_date ORDER BY id DESC LIMIT 1
    </select>
    <select id="getLectureList" resultMap="lectureList">
        SELECT *
        <if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(user)">
            ,(SELECT count(*) FROM scrap_timetable ST WHERE ST.lecture_timetable_id = LT.id AND ST.user_id = #{user.id} AND is_deleted = 0) as is_scraped
        </if>
        FROM hangang.lecture_timetable LT WHERE LT.semester_date = #{timeTableCriteria.semesterDateId} AND LT.is_deleted = 0
        <choose>
            <when test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(timeTableCriteria.classification)">
                AND
                <foreach collection="timeTableCriteria.classification" item="classification" open="(" close=")" separator="or">
                    LT.classification = #{classification}
                </foreach>
            </when>
        </choose>
        <choose>
            <when test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(timeTableCriteria.keyword)">
                <choose>
                    <when test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(timeTableCriteria.criteria)">
                        <if test='(timeTableCriteria.criteria eq "교수명".toString())'>
                            AND (LT.professor like concat('%',#{timeTableCriteria.keyword},'%'))
                        </if>
                        <if test='(timeTableCriteria.criteria eq "교과명".toString())'>
                            AND (LT.name like concat('%',#{timeTableCriteria.keyword},'%'))
                        </if>
                    </when>
                    <otherwise>
                        AND ((LT.name like concat('%',#{timeTableCriteria.keyword},'%')) OR (LT.professor like concat('%',#{timeTableCriteria.keyword},'%')))
                    </otherwise>
                </choose>
            </when>
        </choose>
        <choose>
            <when test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(timeTableCriteria.department)">
                AND
                <foreach collection="timeTableCriteria.department" item="department" open="(" close=")" separator="or">
                    department = #{department}
                </foreach>
            </when>
        </choose>
        ORDER BY LT.id ASC
        LIMIT #{timeTableCriteria.cursor}, #{timeTableCriteria.limit}
    </select>

    <select id="getTableListByUserId" resultType="in.hangang.domain.UserTimeTable">
        SELECT id, semester_date_id, name FROM hangang.user_timetables WHERE user_id = #{userId} AND is_deleted = 0
        <choose>
            <when test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(semesterDateId)">
                    AND semester_date_id = #{semesterDateId}
            </when>
        </choose>
    </select>

    <select id="getTableById" resultMap="mainTable">
        SELECT id, semester_date_id, name FROM hangang.user_timetables WHERE id = #{id} AND is_deleted = 0;
    </select>

    <resultMap id="mainTable" type="in.hangang.domain.TimeTableMap">
        <result column="id" property="id"/>
        <result column="semester_date_id" property="tableSemesterDate"/>
        <result column="name" property="tableName"/>
        <!--
        <collection property="lectureList" ofType="in.hangang.domain.LectureTimeTable" column="{id=id}" select="getLectureListByTimeTableId">
        </collection>
        -->
    </resultMap>

    <select id="getTimeTableIdByLecture" resultType="Long">
        SELECT user_timetable_id FROM timetables TT
        INNER JOIN user_timetables UT ON TT.user_timetable_id = UT.id
        WHERE TT.lecture_id = #{lectureId} AND UT.user_id = #{userId} AND TT.is_deleted = 0
    </select>

    <select id="getClassTimeByLectureId" resultType="String">
        SELECT class_time FROM hangang.lecture_timetable WHERE id = #{lectureId};
    </select>

    <select id="getSemesterDateByLectureId" resultType="Long">
        SELECT semester_date FROM hangang.lecture_timetable WHERE id = #{lectureId};
    </select>

    <select id="getSemesterDateByTimeTableId" resultType="Long">
        SELECT semester_date_id FROM hangang.user_timetables WHERE id =  #{timeTableId}
    </select>

    <select id="getClassTimeByTimeTable" resultType="String">
        SELECT class_time FROM hangang.lecture_timetable
        WHERE id = ANY(SELECT lecture_id FROM timetables WHERE user_timetable_id = #{timeTableId} AND is_deleted = 0);
    </select>

    <select id="getClassMapByTimeTable" resultMap="classTimeMap">
        SELECT id, name, class_time, professor FROM hangang.lecture_timetable
        WHERE id = ANY(SELECT lecture_id FROM timetables WHERE user_timetable_id = #{timetableId} AND is_deleted = 0);
    </select>

    <select id="getClassMapByLectureId" resultMap="classTimeMap">
        SELECT id, name, class_time, professor FROM hangang.lecture_timetable WHERE id = #{lectureId}
    </select>

    <resultMap id="classTimeMap" type="in.hangang.domain.LectureTimeTable">
        <result column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="professor" property="professor"/>
        <result column="class_time" property="class_time"/>
    </resultMap>

    <select id="getUserIdByTimeTableId" resultType="Long">
        SELECT user_id FROM user_timetables WHERE id = #{timeTableId} AND is_deleted=0;
    </select>

    <select id="getNameByTimeTableId" resultType="String">
        SELECT name FROM user_timetables WHERE id = #{timeTableId} AND is_deleted=0;
    </select>

    <select id="getLectureListByTimeTableId" resultMap="lectureTimeTableList">
        <!--
        SELECT * FROM hangang.lecture_timetable
        WHERE id = ANY(SELECT lecture_id FROM timetables WHERE user_timetable_id = #{timeTableId} AND is_deleted = 0);
        -->
        SELECT
        <include refid="lectureTimeTableList">
            <property name="prefix" value=""/>
            <property name="alias" value="LTT."/>
        </include>
        FROM timetables TT
        JOIN lecture_timetable LTT ON LTT.id = TT.lecture_id
        WHERE TT.user_timetable_id = #{timeTableId} AND TT.is_deleted = 0;
    </select>

    <select id="getCountSemesterDate" resultType="Long">
        SELECT count(*) FROM hangang.user_timetables WHERE user_id = #{userId} AND semester_date_id = #{semesterDateId} AND is_deleted = 0
    </select>

    <select id="getCountTimeTable" resultType="Long">
        SELECT count(*) FROM hangang.user_timetables WHERE user_id = #{userId} AND is_deleted = 0
    </select>

    <select id="isAlreadyExists" resultType="Long">
        SELECT id FROM timetables WHERE user_timetable_id = #{timeTableId} AND lecture_id = #{lectureId} AND is_deleted = 0
    </select>

    <select id="isExists" resultType="Long">
        SELECT id FROM hangang.lecture_timetable WHERE id = #{lectureId} AND is_custom = 0
    </select>

    <insert id="createLectureOnTimeTable">
        INSERT INTO hangang.timetables(user_timetable_id, lecture_id) VALUES(#{timeTableId}, #{lectureId});
    </insert>

    <select id="createTimetable" resultType="Long">
        INSERT INTO hangang.user_timetables(user_id, semester_date_id, name) VALUES(#{user_id}, #{semester_date_id}, #{name});
        SELECT LAST_INSERT_ID();
    </select>

    <update id="updateTimeTable">
        UPDATE hangang.user_timetables SET name = #{name}, updated_at = now() WHERE id = #{timeTableId};
    </update>

    <update id="deleteTimetable">
        UPDATE user_timetables SET is_deleted = 1, updated_at = now() WHERE id = #{timeTableId};
    </update>

    <select id="getSemesterDateId" resultType="Long">
        SELECT id FROM semester_date WHERE id = #{semesterDateId};
    </select>

    <select id="getLectureIdByCode" resultType="Long">
        SELECT id FROM lecture_timetable WHERE code = #{code} AND is_deleted = 0;
    </select>

    <select id="createLecture" resultType="Long">
        INSERT INTO hangang.lecture_timetable(is_custom, code, name, professor, class_time)
        VALUES(#{is_custom}, #{code}, #{name}, #{professor}, #{class_time});
        SELECT LAST_INSERT_ID();
    </select>

    <update id="deleteLectureOnTimeTable">
        UPDATE hangang.timetables SET is_deleted = 1, updated_at = now() WHERE user_timetable_id = #{timeTableId} AND lecture_id = #{lectureId}
    </update>

    <update id="assignMainTimeTable">
        UPDATE hangang.user_timetables SET is_main = 1 WHERE id = #{timeTableId}
    </update>

    <update id="updateMainTimeTable">
        <!-- mysql에서 UPDATE할 같은 테이블을 조회해서 업데이트하는 것이 막혀 있음 -->
        UPDATE hangang.user_timetables SET is_main = 0 WHERE id IN (SELECT id FROM(SELECT id FROM hangang.user_timetables WHERE user_id = #{userId} AND is_main = 1 AND is_deleted = 0) as temp);
        UPDATE hangang.user_timetables SET is_main = 1 WHERE id = #{timeTableId};
    </update>

    <select id="getMainTimeTableId" resultType="Long">
        SELECT id FROM hangang.user_timetables WHERE user_id = #{userId} AND is_main = 1 AND is_deleted = 0
    </select>

    <insert id="createScrapLecture">
        INSERT INTO hangang.scrap_timetable(user_id, lecture_timetable_id) VALUES(#{userId}, #{lectureId});
    </insert>

    <select id="getLectureByScrap" resultMap="in.hangang.mapper.LectureMapper.lectureList">
        SELECT * FROM lecture WHERE (name, professor)
        IN (SELECT name, professor FROM lecture_timetable WHERE id
        IN (SELECT lecture_timetable_id from scrap_timetable WHERE user_id = #{userId} AND is_deleted = 0));
    </select>

    <select id="getScrapLectureList" resultMap="lectureList">
        SELECT * FROM hangang.lecture_timetable
        WHERE id = ANY(SELECT lecture_timetable_id FROM hangang.scrap_timetable WHERE user_id = #{userId} AND is_deleted = 0);
    </select>

    <select id="getScrapLectureByLectureId" resultType="Long">
        SELECT id FROM hangang.scrap_timetable WHERE user_id = #{userId} AND lecture_timetable_id = #{lectureId} AND is_deleted = 0;
    </select>

    <update id="deleteScrapLecture">
        UPDATE hangang.scrap_timetable SET is_deleted = 1 WHERE user_id = #{userId} AND lecture_timetable_id = #{lectureId};
    </update>

    <delete id="deleteLecture">
        DELETE FROM hangang.lecture_timetable WHERE id = #{lectureId}
    </delete>

    <resultMap id="lectureTimeTableList" type="in.hangang.domain.LectureTimeTable">
        <result column="id" property="id"/>
        <result column="is_custom" property="is_custom"/>
        <result column="semester_date" property="semester_date"/>
        <result column="code" property="code"/>
        <result column="name" property="name"/>
        <result column="classification" property="classification"/>
        <result column="grades" property="grades"/>
        <result column="class" property="classNumber"/>
        <result column="regular_number" property="regular_number"/>
        <result column="department" property="department"/>
        <result column="target" property="target"/>
        <result column="professor" property="professor"/>
        <result column="is_english" property="is_english"/>
        <result column="design_score" property="design_score"/>
        <result column="is_elearning" property="is_elearning"/>
        <result column="class_time" property="class_time"/>
        <result column="created_at" property="created_at"/>
        <result column="updated_at" property="updated_at"/>
        <collection
                property="rating" column="{name=name, professor=professor}" select="getRatingByNameAndProfessor">
        </collection>
        <collection
                property="lecture_id" column="{id=id}" select="getLectureIdByLectureTimeTableId">
        </collection>
    </resultMap>

    <resultMap id="lectureList" type="in.hangang.domain.LectureTimeTable">
        <result column="id" property="id"/>
        <result column="is_scraped" property="is_scraped"/>
        <result column="is_custom" property="is_custom"/>
        <result column="semester_date" property="semester_date"/>
        <result column="code" property="code"/>
        <result column="name" property="name"/>
        <result column="classification" property="classification"/>
        <result column="grades" property="grades"/>
        <result column="class" property="classNumber"/>
        <result column="regular_number" property="regular_number"/>
        <result column="department" property="department"/>
        <result column="target" property="target"/>
        <result column="professor" property="professor"/>
        <result column="is_english" property="is_english"/>
        <result column="design_score" property="design_score"/>
        <result column="is_elearning" property="is_elearning"/>
        <result column="class_time" property="class_time"/>
        <result column="created_at" property="created_at"/>
        <result column="updated_at" property="updated_at"/>
        <collection
                property="rating" column="{name=name, professor=professor}" select="getRatingByNameAndProfessor">
        </collection>
        <collection
                property="lecture_id" column="{id=id}" select="getLectureIdByLectureTimeTableId">
        </collection>
    </resultMap>

    <select id="getLectureIdByLectureTimeTableId" resultType="Long">
        SELECT id FROM lecture WHERE (name, professor) IN (SELECT name, professor FROM lecture_timetable WHERE id = #{id})
    </select>
    <select id="getRatingByNameAndProfessor" resultType="Float">
        SELECT total_rating FROM lecture WHERE name = #{name} AND professor = #{professor};
    </select>

    <sql id="lectureTimeTableList">
        ${alias}id AS ${prefix}id
        ,${alias}is_custom AS ${prefix}is_custom
        ,${alias}semester_date AS ${prefix}semester_date
        ,${alias}code AS ${prefix}code
		,${alias}name AS ${prefix}name
		,${alias}department AS ${prefix}department
		,${alias}target AS ${prefix}target
		,${alias}professor AS ${prefix}professor
		,${alias}classification AS ${prefix}classification
		,${alias}grades AS ${prefix}grades
		,${alias}class AS ${prefix}class
		,${alias}class_time AS ${prefix}class_time
		,${alias}regular_number AS ${prefix}regular_number
		,${alias}is_deleted AS ${prefix}is_deleted
        ,${alias}created_at AS ${prefix}created_at
        ,${alias}updated_at AS ${prefix}updated_at
    </sql>



</mapper>